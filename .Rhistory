stop("series name not found!")
}
ts.plot(s_lb, s_ub, s,
gpars=list(main=series_name, sub="Forecasts with 95% CI", xlab="", ylab= "", lty=c(3, 3, 1), xaxt="n", type = "o", pch=20, cex=0.8, las=2, col = c("lightblue","lightblue","blue")))
ts.plot(s_lb, s_ub, na.omit(s),
gpars=list(main=series_name, sub="Forecasts with 95% CI", xlab="", ylab= "", lty=c(3, 3, 1), xaxt="n", type = "o", pch=20, cex=0.8, las=2, col = c("lightblue","lightblue","blue")))
na.omit(s)
s
ts.plot(s_lb, gpars=list(main=series_name, sub="Forecasts with 95% CI", xlab="", ylab= "", lty=3, xaxt="n", type = "o", pch=20, cex=0.8, las=2, col = "lightblue"))
s_lb
lines(which(!is.na(s_lb)), na.omit(s_lb))
which(!is.na(s_lb)), na.omit(s_lb)
na.omit(s_lb)
!is.na(s_lb)
s_lb
na.omit(s_lb)
fcst
fcst_stdev
ts.plot(s_lb, s_ub, na.omit(s),
gpars=list(main=series_name, sub="Forecasts with 95% CI", xlab="", ylab= "", lty=c(3, 3, 1), xaxt="n", type = "o", pch=20, cex=0.8, las=2, col = c("lightblue","lightblue","blue")))
ts.plot(s_lb, s_ub, s,
gpars=list(main=series_name, sub="Forecasts with 95% CI", xlab="", ylab= "", lty=c(3, 3, 1), xaxt="n", type = "o", pch=20, cex=0.8, las=2, col = c("lightblue","lightblue","blue")))
axis(1, at=seq(start(s)[1], end(s)[1], by = 1), las=2)
s
spline(s)
plot(spline(s$y))
plot(spline(s)$y)
ts.plot(spline(s)$y)
ts.plot(s_lb, s_ub, s,
gpars=list(main=series_name, sub="Forecasts with 95% CI", xlab="", ylab= "", lty=c(3, 3, 1), xaxt="n", type = "o", pch=20, cex=0.8, las=2, col = c("lightblue","lightblue","blue")))
ts.plot(s_lb, s_ub, s,
gpars=list(main=series_name, sub="Forecasts with 95% CI", xlab="", ylab= "", lty=c(3, 3, 1), xaxt="n", type = "o", pch=20, cex=0.8, las=2, col = c("lightblue","lightblue","blue")))
axis(1, at=seq(start(s)[1], end(s)[1], by = 1), las=2)
.libPaths()
document("rjd3nowcasting")
library(devtools)
library(roxygen2)
document("rjd3nowcasting")
getwd()
rlang::last_trace()
set.seed(100)
data<-ts(matrix(rnorm(500), 100, 5), frequency = 12, start = c(2010,1))
data[100,1]<-data[99:100,2]<-data[(1:100)[-seq(3,100,3)],5]<-NA
dfm_model <- model(nfactors=2,
nlags=2,
factors_type = c("M", "M", "YoY", "M", "Q"),
factors_loading = matrix(data=TRUE, 5, 2),
var_init = "Unconditional")
library(rJava)
library(rjd3toolkit)
library(readxl)
source("R/estimation.R")
source("R/results.R")
dfm_model <- model(nfactors=2,
nlags=2,
factors_type = c("M", "M", "YoY", "M", "Q"),
factors_loading = matrix(data=TRUE, 5, 2),
var_init = "Unconditional")
source("E:/Documents/LEMASSO/r_own_packages/rjd3nowcasting/R/estimation.R", echo=TRUE)
dfm_model <- model(nfactors=2,
nlags=2,
factors_type = c("M", "M", "YoY", "M", "Q"),
factors_loading = matrix(data=TRUE, 5, 2),
var_init = "Unconditional")
data<-as.data.frame(read_excel("E:/Documents/LEMASSO/Nowcasting/rjd3nowcasting/Book4.xlsx", sheet = "data_used R"))
data_ts<-ts(data[,-1], start=c(2015,1), frequency = 12)
# 0. Useful functions in rJava
.jinit()
.jclassPath() # to see the .jar already accessible
#.jaddClassPath()  # to add a new class -> use this for
# Examples
## To load JAVA class in R
### https://github.com/palatej/rjd3_tests/blob/main/R%20files/rjava_init.R
## Use a method of a .jar file in a loaded package
# k = 0
# sample = T
# data<-x
# test<-.jcall("demetra/stats/r/Tests", "Ldemetra/stats/StatisticalTest;", "jarqueBera", as.numeric(data), as.integer(k), as.logical(sample))
# test
# 1. Add a .jar file to the accessible .jar files
.jaddClassPath("inst\\java\\jdplus-dfm-base-api-1.0.0-SNAPSHOT.jar")
.jaddClassPath("inst\\java\\jdplus-dfm-base-core-1.0.0-SNAPSHOT.jar")
.jaddClassPath("inst\\java\\jdplus-dfm-base-r-1.0.0-SNAPSHOT.jar")
.jclassPath()
.jcall("jdplus/toolkit/base/api/information/InformationExtractors", "V", "reloadExtractors")
dfm_model <- model(nfactors=2,
nlags=2,
factors_type = c("M", "M", "YoY", "M", "Q"),
factors_loading = matrix(data=TRUE, 5, 2),
var_init = "Unconditional")
rslt_em<-estimate_em(dfm_model, data)
data
rslt_em<-estimate_em(dfm_model, data_ts)
get_forecasts(rslt_em, nf = 3, forecasts_only = TRUE)
results<-rslt_em
nf = 3
forecasts_only = TRUE
extrct_f<-paste0("forecasts(", nf, ")")
f<-ts(rjd3toolkit::result(results$jestimates, extrct_f),
frequency = results$freq,
start = start)
# Forecasts on original series
extrct_f<-paste0("forecasts(", nf, ")")
extrct_f
f<-ts(rjd3toolkit::result(results$jestimates, extrct_f),
frequency = results$freq,
start = start)
rjd3toolkit::result(results$jestimates, extrct_f)
results$freq
start
get_forecasts <- function(results, nf = 12, forecasts_only = TRUE){
# Forecasts on original series
extrct_f<-paste0("forecasts(", nf, ")")
f<-ts(rjd3toolkit::result(results$jestimates, extrct_f),
frequency = results$freq,
start = results$start)
colnames(f)<-results$series_names
# Standard deviation of the forecasts on original series
extrct_fs<-paste0("forecasts_stderr(", nf, ")")
fs<-ts(rjd3toolkit::result(results$jestimates, extrct_fs),
frequency = results$freq,
start = results$start)
colnames(fs)<-results$series_names
# Forecasts on transformed series
extrct_ft<-paste0("forecasts_transformed(", nf, ")")
ft<-ts(rjd3toolkit::result(results$jestimates, extrct_ft),
frequency = results$freq,
start = results$start)
colnames(ft)<-results$series_names
# Standard deviation of the forecasts on transformed series
extrct_fts<-paste0("forecasts_transformed_stderr(", nf, ")")
fts<-ts(rjd3toolkit::result(results$jestimates, extrct_fts),
frequency = results$freq,
start = results$start)
colnames(fts)<-results$series_names
# Select forecasts only if required
if(forecasts_only){
input<-ts(rjd3toolkit::result(results$jestimates, "input"),
frequency = results$freq,
start = results$start)
nc<-ncol(input)
nf<-vector(mode="integer", length=nc)
for(j in 1:nc){
cj<-input[,j]
nf[j]<-min(which(!is.na(rev(cj))))-1
}
nf_max<-max(nf)
strt<-time(f)[nrow(input)-nf_max+1]
strt_yr<-floor(strt)
strt_mth<-round((strt%%1)*freq+1,0)
f_f<-window(f, start = c(strt_yr, strt_mth))
fs_f<-window(fs, start = c(strt_yr, strt_mth))
ft_f<-window(ft, start = c(strt_yr, strt_mth))
fts_f<-window(fts, start = c(strt_yr, strt_mth))
if(nf_max > 0){
for(j in 1:nc){
n_na<-nf_max-nf[j]
if(n_na>0) f_f[1:n_na,j]<-fs_f[1:n_na,j]<-ft_f[1:n_na,j]<-fts_f[1:n_na,j]<-NA
}
}
}else{
f_f<-f
fs_f<-fs
ft_f<-ft
fts_f<-fts
}
return(list(
forecasts=f_f,
forecasts_stdev=fs_f,
forecasts_transformed=ft_f,
forecasts_transformed_stdev=fts_f)
)
}
get_forecasts(rslt_em, nf = 3, forecasts_only = TRUE)
get_forecasts <- function(results, nf = 12, forecasts_only = TRUE){
# Forecasts on original series
extrct_f<-paste0("forecasts(", nf, ")")
f<-ts(rjd3toolkit::result(results$jestimates, extrct_f),
frequency = results$freq,
start = results$start)
colnames(f)<-results$series_names
# Standard deviation of the forecasts on original series
extrct_fs<-paste0("forecasts_stderr(", nf, ")")
fs<-ts(rjd3toolkit::result(results$jestimates, extrct_fs),
frequency = results$freq,
start = results$start)
colnames(fs)<-results$series_names
# Forecasts on transformed series
extrct_ft<-paste0("forecasts_transformed(", nf, ")")
ft<-ts(rjd3toolkit::result(results$jestimates, extrct_ft),
frequency = results$freq,
start = results$start)
colnames(ft)<-results$series_names
# Standard deviation of the forecasts on transformed series
extrct_fts<-paste0("forecasts_transformed_stderr(", nf, ")")
fts<-ts(rjd3toolkit::result(results$jestimates, extrct_fts),
frequency = results$freq,
start = results$start)
colnames(fts)<-results$series_names
# Select forecasts only if required
if(forecasts_only){
input<-ts(rjd3toolkit::result(results$jestimates, "input"),
frequency = results$freq,
start = results$start)
nc<-ncol(input)
nf<-vector(mode="integer", length=nc)
for(j in 1:nc){
cj<-input[,j]
nf[j]<-min(which(!is.na(rev(cj))))-1
}
nf_max<-max(nf)
strt<-time(f)[nrow(input)-nf_max+1]
strt_yr<-floor(strt)
strt_mth<-round((strt%%1)*results$freq+1,0)
f_f<-window(f, start = c(strt_yr, strt_mth))
fs_f<-window(fs, start = c(strt_yr, strt_mth))
ft_f<-window(ft, start = c(strt_yr, strt_mth))
fts_f<-window(fts, start = c(strt_yr, strt_mth))
if(nf_max > 0){
for(j in 1:nc){
n_na<-nf_max-nf[j]
if(n_na>0) f_f[1:n_na,j]<-fs_f[1:n_na,j]<-ft_f[1:n_na,j]<-fts_f[1:n_na,j]<-NA
}
}
}else{
f_f<-f
fs_f<-fs
ft_f<-ft
fts_f<-fts
}
return(list(
forecasts=f_f,
forecasts_stdev=fs_f,
forecasts_transformed=ft_f,
forecasts_transformed_stdev=fts_f)
)
}
get_forecasts(rslt_em, nf = 3, forecasts_only = TRUE)
library(rJava)
library(rjd3toolkit)
library(readxl)
source("R/estimation.R")
source("R/results.R")
#source("R/zzz.R")
data<-as.data.frame(read_excel("E:/Documents/LEMASSO/Nowcasting/rjd3nowcasting/Book4.xlsx", sheet = "data_used R"))
data_ts<-ts(data[,-1], start=c(2015,1), frequency = 12)
# 0. Useful functions in rJava
.jinit()
.jclassPath() # to see the .jar already accessible
#.jaddClassPath()  # to add a new class -> use this for
# Examples
## To load JAVA class in R
### https://github.com/palatej/rjd3_tests/blob/main/R%20files/rjava_init.R
## Use a method of a .jar file in a loaded package
# k = 0
# sample = T
# data<-x
# test<-.jcall("demetra/stats/r/Tests", "Ldemetra/stats/StatisticalTest;", "jarqueBera", as.numeric(data), as.integer(k), as.logical(sample))
# test
# 1. Add a .jar file to the accessible .jar files
.jaddClassPath("inst\\java\\jdplus-dfm-base-api-1.0.0-SNAPSHOT.jar")
.jaddClassPath("inst\\java\\jdplus-dfm-base-core-1.0.0-SNAPSHOT.jar")
.jaddClassPath("inst\\java\\jdplus-dfm-base-r-1.0.0-SNAPSHOT.jar")
.jclassPath()
.jcall("jdplus/toolkit/base/api/information/InformationExtractors", "V", "reloadExtractors")
factor_loaded <- matrix(data = c(rep(TRUE,ns),TRUE,TRUE,FALSE,FALSE,FALSE), ns, nf)
ns<-ncol(data_ts)
nf<-2
nl<-2
freq<-12
factor_type <- c("M", "M", "YoY", "M", "Q")
#factor_loaded <- matrix(data = TRUE, ns, nf)
factor_loaded <- matrix(data = c(rep(TRUE,ns),TRUE,TRUE,FALSE,FALSE,FALSE), ns, nf)
varInit = "Unconditional"
mVariance = NULL
#start<-c(2015,1)
start<-start(data_ts)
standardized<-FALSE
n_fcst<-12
jfactor_loaded <- rjd3toolkit::.r2jd_matrix(factor_loaded)
jmodel<-.jcall("jdplus/dfm/base/r/DynamicFactorModels",
"Ljdplus/dfm/base/core/DynamicFactorModel;",
"model",
as.integer(nf),
as.integer(nl),
.jarray(as.character(factor_type)),
jfactor_loaded,
.jnew("java/lang/String", as.character(varInit)),
.jnull("[D"))
jdata<-rjd3toolkit::.r2jd_matrix(data_ts)
jpca<-.jcall("jdplus/dfm/base/r/DynamicFactorModels",
"Ljdplus/dfm/base/core/DfmResults;",
"estimate_PCA",
jmodel,
jdata,
as.integer(freq),
.jarray(as.integer(start)),
standardized,
as.integer(n_fcst))
z<-rjd3toolkit::.jd3_object(jpca,"NOWCASTING",T)
dictionary(z)
rjd3toolkit::result(z,"parameters_var")
rjd3toolkit::result(z,"parameters_var_variance")
rjd3toolkit::result(z,"parameters_factors")
rjd3toolkit::result(z,"parameters_factors_variance")
rjd3toolkit::result(z,"sample_mean")
rjd3toolkit::result(z,"sample_stddev")
rjd3toolkit::result(z,"input")
rjd3toolkit::result(z,"input_transformed")
rjd3toolkit::result(z,"factors")
rjd3toolkit::result(z,"factors_stderr")
rjd3toolkit::result(z,"residuals")
rjd3toolkit::result(z,"residuals_standardized")
rjd3toolkit::result(z,"likelihood_ll")
rjd3toolkit::result(z,"forecasts_transformed(12)")
rjd3toolkit::result(z,"forecasts(12)")
rjd3toolkit::result(z,"forecasts_transformed_stderr(12)")
rjd3toolkit::result(z,"forecasts_stderr(12)")
# 3. Tests using functions
# set.seed(100)
# data<-ts(matrix(rnorm(500), 100, 5), frequency = 12, start = c(2010,1))
# data[100,1]<-data[99:100,2]<-data[(1:100)[-seq(3,100,3)],5]<-NA
dfm_model <- model(nfactors=2,
nlags=2,
factors_type = c("M", "M", "YoY", "M", "Q"),
factors_loading = matrix(data=TRUE, 5, 2),
var_init = "Unconditional")
rslt_pca<-estimate_pca(dfm_model, data_ts)
rslt_em<-estimate_em(dfm_model, data_ts)
rslt_ml<-estimate_ml(dfm_model, data_ts)
rslt_em
rslt_pca
rslt_ml
data2<-as.data.frame(read_excel("E:/Documents/LEMASSO/tests/rjd3nowcasting-tests/Input_PVI.xlsx", sheet = "FR"))
data2_ts<-ts(data2[,-1], start=c(2015,1), frequency = 12)
types<-c("M","M","YoY","YoY","M","M",rep("YoY",5))
#loadings1<-matrix(data=TRUE, ns, 2)
loadings2<-matrix(data=c(rep(TRUE,ns*2),rep(TRUE,4),rep(FALSE,7)), ns, 3)
dfm_model <- model(nfactors=2,
nlags=2,
factors_type = types,
factors_loading = loadings2,
var_init = "Unconditional")
dfm_model <- model(nfactors=3,
nlags=2,
factors_type = types,
factors_loading = loadings2,
var_init = "Unconditional")
loadings2
## 3.2.
ns<-ncol(data2_ts)
types<-c("M","M","YoY","YoY","M","M",rep("YoY",5))
#loadings1<-matrix(data=TRUE, ns, 2)
loadings2<-matrix(data=c(rep(TRUE,ns*2),rep(TRUE,4),rep(FALSE,7)), ns, 3)
dfm_model <- model(nfactors=3,
nlags=2,
factors_type = types,
factors_loading = loadings2,
var_init = "Unconditional")
rslt_ml<-estimate_ml(dfm_model, data_ts)
rslt_ml<-estimate_ml(dfm_model, data2_ts)
rslt_ml
x<-rslt_ml
preproc<-get_preprocessing(x)
params<-get_parameters(x)
preproc
t1<-round(cbind(preproc$sample_mean_stdev, params$factors, params$factors_variance),5)
t1
colnames(t1)<-c("Sample mean", "Sample Stdev", "Coeff. of normalized factor F1", "Coeff. of normalized factor F2", "Idiosyncratic variance")
t1<-round(cbind(preproc$sample_mean_stdev, params$factors, params$factors_variance),5)
t1
get_factors(rslt_ml)
params
params$factors
paste0("c", colnames(params$factors))
ncol(params$factors)
factors_name<-paste0("Coeff. of normalized factor F", 1:ncol(params$factors))
factors_name
colnames(t1)<-c("Sample mean", "Sample Stdev", factors_name, "Idiosyncratic variance")
t1
data2<-as.data.frame(read_excel("E:/Documents/LEMASSO/tests/rjd3nowcasting-tests/Input_PVI.xlsx", sheet = "FR"))
library(rJava)
library(rjd3toolkit)
library(readxl)
source("R/estimation.R")
source("R/results.R")
data2<-as.data.frame(read_excel("E:/Documents/LEMASSO/tests/rjd3nowcasting-tests/Input_PVI.xlsx", sheet = "FR"))
data2_ts<-ts(data2[,-1], start=c(2015,1), frequency = 12)
.jinit()
.jclassPath() # to see the .jar already accessible
#.jaddClassPath()  # to add a new class -> use this for
# Examples
## To load JAVA class in R
### https://github.com/palatej/rjd3_tests/blob/main/R%20files/rjava_init.R
## Use a method of a .jar file in a loaded package
# k = 0
# sample = T
# data<-x
# test<-.jcall("demetra/stats/r/Tests", "Ldemetra/stats/StatisticalTest;", "jarqueBera", as.numeric(data), as.integer(k), as.logical(sample))
# test
# 1. Add a .jar file to the accessible .jar files
.jaddClassPath("inst\\java\\jdplus-dfm-base-api-1.0.0-SNAPSHOT.jar")
.jaddClassPath("inst\\java\\jdplus-dfm-base-core-1.0.0-SNAPSHOT.jar")
.jaddClassPath("inst\\java\\jdplus-dfm-base-r-1.0.0-SNAPSHOT.jar")
.jclassPath()
.jcall("jdplus/toolkit/base/api/information/InformationExtractors", "V", "reloadExtractors")
ns<-ncol(data2_ts)
types<-c("M","M","YoY","YoY","M","M",rep("YoY",5))
#loadings1<-matrix(data=TRUE, ns, 2)
loadings2<-matrix(data=c(rep(TRUE,ns*2),rep(TRUE,4),rep(FALSE,7)), ns, 3)
dfm_model <- model(nfactors=3,
nlags=2,
factors_type = types,
factors_loading = loadings2,
var_init = "Unconditional")
rslt_ml<-estimate_ml(dfm_model, data2_ts)
s
x<-rslt_ml
fcst_all<-get_forecasts(x, nf = 12, forecasts_only = FALSE)
fcst<-fcst_all$forecasts
fcst_stdev<-fcst_all$forecasts_stdev
fcst_all
fcst
fcst_only<-get_forecasts(x, nf = 12, forecasts_only = TRUE)
fcst_all<-get_forecasts(x, nf = 12, forecasts_only = FALSE)
fcst<-fcst_all$forecasts
fcst_stdev<-fcst_all$forecasts_stdev
fcst_only<-get_forecasts(x, nf = 12, forecasts_only = TRUE)
fcst_only
ts.plot(s_lb, s_ub, s, sf,
gpars=list(main=series_name, sub="Forecasts with 95% CI", xlab="", ylab= "", lty=c(3, 3, 1, 1), xaxt="n", type = "o", pch=20, cex=0.8, las=2, col = c("orange","orange","black","red")))
series_name<-colnames(fcst)[1]
s<-fcst[,series_name]
s_lb<-s - 1.96 * fcst_stdev[,series_name]
s_ub<-s + 1.96 * fcst_stdev[,series_name]
sf<-fcst_only[,series_name]
fcst_only<-get_forecasts(x, nf = 12, forecasts_only = TRUE)$forecasts
s<-fcst[,series_name]
s_lb<-s - 1.96 * fcst_stdev[,series_name]
s_ub<-s + 1.96 * fcst_stdev[,series_name]
sf<-fcst_only[,series_name]
ts.plot(s_lb, s_ub, s, sf,
gpars=list(main=series_name, sub="Forecasts with 95% CI", xlab="", ylab= "", lty=c(3, 3, 1, 1), xaxt="n", type = "o", pch=20, cex=0.8, las=2, col = c("orange","orange","black","red")))
fcst_only
plot.JD3_SsfModelEstimation <- function(x, series_name=NULL){
fcst_all<-get_forecasts(x, nf = 12, forecasts_only = FALSE)
fcst<-fcst_all$forecasts
fcst_stdev<-fcst_all$forecasts_stdev
fcst_only<-get_forecasts(x, nf = 12, forecasts_only = TRUE)$forecasts
if(is.null(series_name)){
series_name<-colnames(fcst)[1]
}
if(series_name %in% colnames(fcst)){
s<-fcst[,series_name]
s_lb<-s - 1.96 * fcst_stdev[,series_name]
s_ub<-s + 1.96 * fcst_stdev[,series_name]
sf<-fcst_only[,series_name]
}else{
stop("series name not found!")
}
ts.plot(s_lb, s_ub, s, sf,
gpars=list(main=series_name, sub="Forecasts with 95% CI", xlab="", ylab= "", lty=c(3, 3, 1, 1), xaxt="n", type = "o", pch=20, cex=0.8, las=2, col = c("orange","orange","black","red")))
axis(1, at=seq(start(s)[1], end(s)[1], by = 1), las=2)
}
plot
plot(rslt_ml,"FR_BS")
series_name<-FR_BS
series_name<-"FR_BS"
s<-fcst[,series_name]
s
sf<-fcst_only[,series_name]
sf
s
sf
data2<-as.data.frame(read_excel("E:/Documents/LEMASSO/tests/rjd3nowcasting-tests/Input_PVI.xlsx", sheet = "FR"))
data2_ts<-ts(data2[,-1], start=c(2012,1), frequency = 12)
rslt_ml<-estimate_em(dfm_model, data2_ts)
x<-rslt_ml
fcst_all<-get_forecasts(x, nf = 12, forecasts_only = FALSE)
fcst<-fcst_all$forecasts
fcst_stdev<-fcst_all$forecasts_stdev
fcst_only<-get_forecasts(x, nf = 12, forecasts_only = TRUE)$forecasts
s<-fcst[,series_name]
s_lb<-s - 1.96 * fcst_stdev[,series_name]
s_ub<-s + 1.96 * fcst_stdev[,series_name]
sf<-fcst_only[,series_name]
s
sf<-fcst_only[,series_name]
sf
plot.JD3_SsfModelEstimation <- function(x, series_name=NULL){
fcst_all<-get_forecasts(x, nf = 12, forecasts_only = FALSE)
fcst<-fcst_all$forecasts
fcst_stdev<-fcst_all$forecasts_stdev
fcst_only<-get_forecasts(x, nf = 12, forecasts_only = TRUE)$forecasts
if(is.null(series_name)){
series_name<-colnames(fcst)[1]
}
if(series_name %in% colnames(fcst)){
s<-fcst[,series_name]
s_lb<-s - 1.96 * fcst_stdev[,series_name]
s_ub<-s + 1.96 * fcst_stdev[,series_name]
sf<-fcst_only[,series_name]
}else{
stop("series name not found!")
}
ts.plot(s_lb, s_ub, s, sf,
gpars=list(main=series_name, sub="Forecasts with 95% CI", xlab="", ylab= "", lty=c(3, 3, 1, 1), xaxt="n", type = "o", pch=20, cex=0.8, las=2, col = c("orange","orange","black","red")))
axis(1, at=seq(start(s)[1], end(s)[1], by = 1), las=2)
}
plot(rslt_ml,"FR_BS")
sf
s
